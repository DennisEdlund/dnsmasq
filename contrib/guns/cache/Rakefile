# -*- encoding: utf-8 -*-

task :default => :dump

desc 'Dump and merge dnsmasq host cache'
task :dump do
  require 'set'

  pid = %x(ps axo pid,ucomm).lines.find { |l| l =~ /\bdnsmasq\Z/ }.to_i
  return if pid.zero?

  # Create a table of hostnames to addresses, eliding any aliases of localhost
  parse_hosts = lambda do |buf|
    hosts, locals = {}, %w[127.0.0.1 ::1]
    buf.lines.each do |l|
      addr, host = l.chomp.split "\t"
      next if locals.include? addr
      hosts[host] ||= Set.new
      hosts[host] << addr
    end
    hosts
  end

  # Record current cache
  cache = File.expand_path 'hosts.cache'
  hosts = File.exists?(cache) ? parse_hosts.call(File.read cache) : {}

  # Send USR1 and wait for dnsmasq to close the cache file
  Process.kill 'SIGUSR1', pid
  sleep 0.1 until %x(lsof -p #{pid} 2>/dev/null).lines.grep(Regexp.new cache).empty?

  # Merge old cache records with new ones so we don't lose any records
  hosts.merge! parse_hosts.call(File.read cache)
  File.open cache, 'w' do |f|
    f.puts hosts.sort.reduce('') { |buf, (host, addrs)|
      buf << addrs.sort.map { |a| "#{a}\t#{host}\n" }.join
    }
  end
end
